알고리즘 복잡도(Complexity of Algorithms)

!! 시간 복잡도(Time Complextiy)
- 문제의 크기와 이를 해결하는데 걸리는 시간 사이의 관계

!! 평균 시간 복잡도(Average Time Complexity)
- 임의의 입력 패턴을 가정 했을 때 소요되는 시간의 평군

!! 최악 시간 복잡도(Worst-case Time Complexity)
- 가장 긴 시간을 소요하게 만드는 입력에 따라 소요되는 시간

!! 공간 복잡도(Space Complexity)
- 문제의 크기와 이를 해결하는 데 필요한 메모리 공간 사이의 관계

!!! Big-O Notation [시간 복잡도 표기법]
: 어떤 함수의 증가 양상을 다른 함수와의 비교로 표현하는 방법
: 점근 표기법(asymptotic notation)의 하나
: O(log n), O(n), O(n2), O(2n) 등으로 표기

## 종류
1. O(n) - 선형 시간 알고리즘 >> 입력의 크기에 비례하는 시간 소요 (n의 갯수에 비례)
2. O(log n) - 로그 시간 알고리즘 >> 입력의 크기의 로그에 비례하는 시간 소요 (문제 해결에 필요한 과정들이 연산마다 줄어드는 알고리즘)
3. O(n2) - 이차 시간 알고리즘 >> 문제의 해결에 필요한 단계가 입력 값 n의 제곱과 같다. [예시 : 삽입 정렬]
4. O(2n) - 문제의 해결에 필요한 단계의 수가 2의 n 제곱 수와 같다.
5. O(nlogn) : 병합 정렬 알고리즘
   >> 정렬된 데이터를 반씩 나누어 각각 정렬시킨다. O(logn)
   >> 정렬된 각 데이터를 두개씩 한데 합친 후, 정렬한다. O(n)

!! 시간 복잡도 표시 예시
- 순차적 탐색(무조건 처음 ~ 끝까지 확인하기 때문에 동일하다.)       - 삽입 정렬
  Average-case: O(n)                                              Best case: O(n)  << 정렬되어 있는 리스트라면 Best case
  Worst-case: O(n)                                                Worst case : O(n2)   


재귀 알고리즘(Recursive Algorithms)------------------------ 기초
- 같은 알고리즘을 반복하여 사용하며 문제를 푸는 방법이다.
- 특정 알고리즘 이름이 아니다. 하나의 방법을 말하는 것이다

!! 재귀 함수(Recursive Functions)
- 하나의 함수에서 자신을 다시 호출하여 작업을 수행하는 것

! 이진 트리(binary trees)
! 자연수의 합 구하기 >> 1부터 n까지의 모든 자연수의 합을 구하기

!! 재귀 호출의 종결 조건
- 재귀 알고리즘을 사용하기 위해서는 해당 호출의 종결조건(Trivial case)이 매우 중요하다.
- 만약 종결조건을 지정하지 않는다면 무한하게 알고리즘을 호출하기 때문이다.
ex) def sum(n):    # print(n)
	    if n <= 1:   # 재귀 호출의 종결 조건
    		  return n
    	else:
        	return n + sum(n-1)

      a = int(input("Number: "))
      print(sum(a))
      
      
재귀 알고리즘(Recursive Algorithms)------------------------ 응용
!! 하노이의 탑
- 크기 순서로 쌓여 있는 원반을 한 막대에서 다른 막대로 옮기기
- 더 큰원반 작은 원반 위에 올릴 수 없음
ex) 재귀적(recursive) 방법
import time

def rec(n):
	if n <= 1:
    		return n
       	else:
        	return rec(n-1) + rec(n-2)

ex) 반복적(iterative) 방법
def iter(n):
	if n <= 1:
    		return n
    	else:
        	i = 2
            	t0 = 0
                t1 = 1
                while i <= n:
                	t0, t1 = t1, t0 + t1
                    	i += 1
        return t1
        
 
 while True:
 	nbr = int(input("Enter a number: "))
    	if nbr == -1:
    		break

	ts = time.time()
    	fibo = iter(nbr)
	ts = time.time() - ts
	print("Iterative version: %d (%.3f)" %(fibo, ts))
	ts = time.time()
	fibo = rec(nbr)
	ts = time.time() - ts
	print("Recursive version: %d (%.3f)" %(fibo, ts))






